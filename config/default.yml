#####
#
# DO NOT EDIT THIS FILE
# Instead, copy default.yml to local.yml first and make your config changes in local.yml (or only include the changed
# options). Keep in mind that the YAML format does not like tabs as indentation, you have to use spaces.
#
# Every setting that accepts an id needs to be enclosed with double quotes (").
# The reason is that the ids are too big for Node to handle properly as a number.
# Saving it as a string explicitly works around this issue.
#
# If you don't know any of the Discord ids (like roles or channels), the bot includes a !exportids command which
# by default only the owner can execute. A text file with all the ids will be DM'd to you.
#
#####

database:
  mongodb:
    uri: mongodb://127.0.0.1/raiders-inn-discord-bot


cache:
  redis:
    prefix: "raiders-inn-discord-bot-cache:"


#####
# Every activity (e.g. commands) in a module can be enabled and disabled separately.
#####
modules:
  # Provides general Discord and/or Guild Wars 2 things
  guildwars2:
    # !region eu - Assigns or removes the EU region
    region-eu:
      enabled: false
      # The role id for this region
      role-id: role-id

    # !region na - Assigns or removes the NA region
    region-na:
      enabled: false
      # The role id for this region
      role-id: role-id

    # !wiki - Allows searching the GW2 wiki
    wiki:
      enabled: true

    # A chat code hook that automatically decodes chat codes mentioned in messages
    chat-code:
      enabled: true

  raids:
    # !region - Assign or remove region roles
    region:
      enabled: true
      # The role ids of the supported regions
      roles:
        eu: role-id
        na: role-id

    # !reset - A command to easily see when the weekly raid reset happens
    reset:
      enabled: true

  # Provides extra utilities
  utilities:
    # !roll - Rolling dice
    roll:
      enabled: true
      max-dice: 10
      max-faces: 100

    # A hook that tracks new members and welcomes them
    welcome-new-member:
      enabled: false
      # The target channel id to where the welcome messages should be posted
      channel-id: channel-id


#####
# The permissions are set up in a hierarchical way. If a person is a member of more than 1 group,
# the first matched command in either blacklist or whitelist in a group (top-down) from the list below gets priority.
# This means that if in groupA commandA is listed, and user is part of groupA and wants to execute commandB, it will
# fall back to the next first group (that is not groupA) that the user is also part of, that has commandB either
# whitelisted or blacklisted explicitly. If none has been found, it will fall back to the default group.
#
# Please note that if both blacklist and whitelist are matched, blacklist will take precedence.
#
# To add a new group, just add a new key and fill in the properties.
# Be sure to *not* delete default, as this is the fallback group in case nothing is matched.
# The asterisk can be used as a wildcard.
#
# It's good practice to copy this to your own local config and change it to your own likings, because
# when you define the root permissions property, you will override all of the roles defined below.
#####
permissions:
  owner:
    user-ids:
      - owner-id
    role-ids: []
    blacklist: []
    whitelist:
      # Makes sure every command is whitelisted for the owner.
      - "*"
      - "*:*"

  moderator:
    user-ids: []
    role-ids: []
    blacklist:
      - admin.*
    whitelist:
      # Even though it looks like all commands are whitelisted, it's not.
      # Blacklist takes precedence, the "*" in the whitelist is just a catch all so it doesn't fall back further.
      - "*"
      - "*:*"

  # The default group is a special case, if nothing has been blacklisted or whitelisted, it will accept all commands.
  # DO NOT define other groups below this one.
  default:
    blacklist:
      - admin.*
    whitelist: []
